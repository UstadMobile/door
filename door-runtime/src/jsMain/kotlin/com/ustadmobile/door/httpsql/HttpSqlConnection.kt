package com.ustadmobile.door.httpsql

import com.ustadmobile.door.jdbc.*
import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.request.*
import io.ktor.http.*
import kotlinx.serialization.json.Json
import kotlin.Array


class HttpSqlConnection(
    /**
     * The endpoint url, which MUST NOT have a trailing /
     */
    internal val endpointUrl: String,
    internal val httpSqlConnectionInfo: HttpSqlConnectionInfo,
    internal val httpClient: HttpClient,
    internal val json: Json,
): Connection, AsyncConnection{

    private var closed = false

    override fun setAutoCommit(commit: Boolean) {

    }

    override fun prepareStatement(sql: String): PreparedStatement {
        TODO("Not yet implemented")
    }

    override fun prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement {
        TODO("Not yet implemented")
    }

    override fun createStatement() = HttpSqlStatement(this)

    override fun commit() {
        TODO("Not yet implemented")
    }

    override fun rollback() {
        TODO("Not yet implemented")
    }

    override fun close() {
        closed = true
    }

    override fun isClosed() = closed

    override fun createArrayOf(arrayType: String, objects: Array<out Any?>): com.ustadmobile.door.jdbc.Array {
        TODO("Not yet implemented")
    }

    override fun getMetaData(): DatabaseMetadata {
        TODO("Not yet implemented")
    }

    override fun getAutoCommit(): Boolean {
        TODO("Not yet implemented")
    }

    override suspend fun prepareStatementAsync(sql: String) = prepareStatementAsync(sql, StatementConstantsKmp.NO_GENERATED_KEYS)

    override suspend fun prepareStatementAsync(sql: String, autoGeneratedKeys: Int): PreparedStatement {
        val preparedStatementResponse: PrepareStatementResponse= httpClient.get("$endpointUrl/connection" +
                "/${httpSqlConnectionInfo.connectionId}/preparedStatement/create"
        ) {
            setBody(PrepareStatementRequest(sql, autoGeneratedKeys))
            contentType(ContentType.Application.Json)
        }.body()

        return HttpSqlPreparedStatement(this, preparedStatementResponse.preparedStatementId)
    }

}