package com.ustadmobile.door.httpsql

import com.ustadmobile.door.jdbc.*
import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import kotlinx.serialization.json.Json
import kotlin.Array


class HttpSqlConnection(
    /**
     * The endpoint url, which MUST NOT have a trailing /
     */
    internal val endpointUrl: String,
    internal val httpSqlConnectionInfo: HttpSqlConnectionInfo,
    internal val httpClient: HttpClient,
    internal val json: Json,
): Connection, AsyncConnection, AsyncCloseable {

    private var closed = false

    private val connectionEndpoint = "$endpointUrl/connection/${httpSqlConnectionInfo.connectionId}"

    private var autoCommit = false

    override fun setAutoCommit(commit: Boolean) {
        throw SQLException("HttpSqlConnection: setAutoCommit: synchronous access not supported")
    }

    override suspend fun setAutoCommitAsync(commit: Boolean) {
        httpClient.get("$connectionEndpoint/setAutoCommit?${HttpSqlPaths.PARAM_AUTOCOMMIT}=$commit").discardRemaining()
    }

    override fun prepareStatement(sql: String): PreparedStatement {
        console.log("FFS: Idi0t: what the f are you here for?\n")
        console.asDynamic().trace()
        js("console.log(new Error().stack);")
        console.log("\nI FUCKING SAID PRINT THE FUCKING TRACE\n")
        throw SQLException("HttpSqlConnection: prepareStatement synchronous access not supported")
    }

    override fun prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement {
        console.log("FFS: Idiot: what the f are you here for?")
        console.asDynamic().trace()
        throw SQLException("HttpSqlConnection: prepareStatement synchronous access not supported")
    }

    override fun createStatement() = HttpSqlStatement(this)

    override fun commit() {
        throw SQLException("HttpSqlConnection: commit: synchronous access not supported")
    }

    override suspend fun commitAsync() {
        httpClient.get("$connectionEndpoint/commit").discardRemaining()
    }

    override fun rollback() {
        throw SQLException("HttpSqlConnection: rollback: synchronous access not supported")
    }

    override fun close() {
        throw SQLException("HttpSqlConnection: close: synchronous access not supported")
    }

    override suspend fun closeAsync() {
        httpClient.get("$connectionEndpoint/close").discardRemaining()
        closed = true
    }

    override fun isClosed() = closed

    override fun createArrayOf(arrayType: String, objects: Array<out Any?>): com.ustadmobile.door.jdbc.Array {
        TODO("createArrayOf: Not yet implemented")
    }

    override fun getMetaData(): DatabaseMetadata {
        TODO("getMetaData() Not yet implemented")
    }

    override fun getAutoCommit() = autoCommit

    override suspend fun prepareStatementAsync(sql: String) = prepareStatementAsync(sql, StatementConstantsKmp.NO_GENERATED_KEYS)

    override suspend fun prepareStatementAsync(sql: String, autoGeneratedKeys: Int): PreparedStatement {
        val preparedStatementResponse: PrepareStatementResponse= httpClient.post("$connectionEndpoint/preparedStatement/create"
        ) {
            setBody(PrepareStatementRequest(sql, autoGeneratedKeys))
            contentType(ContentType.Application.Json)
        }.body()

        return HttpSqlPreparedStatement(this, preparedStatementResponse.preparedStatementId, autoGeneratedKeys)
    }

}