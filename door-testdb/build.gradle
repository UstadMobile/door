import java.time.Duration

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.multiplatform'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id "com.google.devtools.ksp"
}

group rootProject.group
version rootProject.version


android {
    compileSdk rootProject.ext.version_android_compile_sdk
    sourceSets.main.manifest.srcFile('src/androidMain/AndroidManifest.xml')
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion rootProject.ext.version_android_target_sdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }


    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
    namespace 'com.ustadmobile.door.testdb'
}

kotlin {

    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }

    androidTarget {

    }

    jvm {
        compilations.all {
            kotlinOptions.jvmTarget = JavaVersion.VERSION_17
        }
        testRuns["test"].executionTask.configure {
            useJUnit()
        }
    }

    js(IR) {
        browser {
            testTask {
                useKarma {
                    timeout = Duration.ofSeconds(30)
                    useChromeHeadless() //change to useChrome to run the actual browser
                }
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation project(":door-runtime")
                implementation project(":room-annotations")

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$version_kotlinx_serialization"
                implementation "io.ktor:ktor-client-content-negotiation:$version_ktor"
                implementation "io.ktor:ktor-client-core:$version_ktor"
                implementation "io.ktor:ktor-client-json:$version_ktor"
                implementation "io.github.aakira:napier:$version_napier"
                implementation "org.kodein.di:kodein-di:$version_kodein_di"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_kotlinx_coroutines"

            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "app.cash.turbine:turbine:$version_turbine"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_kotlinx_coroutines"
            }
        }

        jvmMain {
            dependencies {
                implementation "io.ktor:ktor-serialization-gson:$version_ktor"
                implementation "org.kodein.di:kodein-di-framework-ktor-server-jvm:$version_kodein_di"
                implementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
                implementation "io.ktor:ktor-server-content-negotiation:$version_ktor"
                implementation "io.ktor:ktor-server-core:$version_ktor"
                implementation "org.jetbrains.kotlin:kotlin-reflect:$version_kotlin"
            }
        }

        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
                implementation "io.ktor:ktor-server-netty:$version_ktor"
                implementation "com.squareup.okhttp3:mockwebserver:$version_mockwebserver"
                implementation "org.mockito.kotlin:mockito-kotlin:$version_kotlin_mockito"
                implementation "io.ktor:ktor-client-okhttp:$version_ktor"
                implementation "io.ktor:ktor-client-gson:$version_ktor"
                implementation "io.ktor:ktor-serialization-kotlinx-json:$version_ktor"
                implementation "com.github.h-thurow:simple-jndi:$version_simple_jndi"
                implementation "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
                implementation "org.apache.commons:commons-dbcp2:$version_apache_commons_dbcp2"
                implementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
                implementation "org.postgresql:postgresql:$version_postgres_jdbc"

                implementation "io.ktor:ktor-server-test-host:$version_ktor"
            }
        }

        jsMain {
            dependencies {
                implementation project(":room-annotations")
            }
        }

        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        androidMain {
            dependencies {
                implementation "androidx.room:room-runtime:$version_android_room"
                implementation "androidx.room:room-ktx:$version_android_room"
                implementation "androidx.paging:paging-runtime:$version_androidx_paging"
                implementation "androidx.room:room-paging:$version_android_room"
                implementation "androidx.core:core-ktx:$version_androidx_core"
                implementation "com.squareup.okhttp3:okhttp:$version_okhttp"
                implementation "com.squareup.okhttp3:okhttp-sse:$version_okhttp"
                implementation "com.google.code.gson:gson:$version_gson"
                implementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
                implementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"
            }
        }

        androidInstrumentedTest {
            dependsOn commonTest
            dependencies {
                implementation kotlin('test-junit')
            }
        }

        androidUnitTest {
            dependsOn commonTest

            dependencies {
                implementation kotlin('test-junit')
                implementation "org.robolectric:robolectric:$version_android_roboelectric"
                implementation "androidx.test.ext:junit:$version_androidx_test_junit_ext"
                implementation "androidx.test:runner:$version_androidx_test_runner"
                implementation "androidx.test:rules:$version_androidx_test_rules"
            }
        }
    }
}

ksp {
    arg("doordb_migrations_out", project.file("$buildDir/generated/door-migrations").absolutePath)
    arg("doordb_postgres_url", rootProject.ext.localProperties["door.postgresUrl"])
    arg("doordb_postgres_user", rootProject.ext.localProperties["door.postgresUser"])
    arg("doordb_postgres_password", rootProject.ext.localProperties["door.postgresPass"])
}

/**
 * Door uses SQLite.JS WASM Worker to run on Kotlin/JS. This is kept as a resource in door-runtime/jsMain.
 *
 * The default Kotlin/JS test runner does not load resources as per this bug:
 * https://youtrack.jetbrains.com/issue/KT-42923
 *
 * This would prevent Door on Kotlin/JS loading the required WebWorker and WASM file. This workaround
 * adds a resource loader to the Karma config as per:
 *
 * https://github.com/DaanVandenBosch/kotlin-js-karma-resources-test/tree/fix
 */
def generateKarmaConfigExtra = tasks.register("generateKarmaConfigExtra") {
    def outputFile = project.file("karma.config.d/karma.config.generated.js")
    outputs.file(outputFile)

    doLast {
        outputFile.text = "var PROJECT_PATH = '${rootProject.rootDir}';\n"
    }
}

tasks.getByName("jsTest") {
    dependsOn(generateKarmaConfigExtra)
}

dependencies {
    kspJvm project(":door-compiler")
    kspJvm project(":door-shallowcopy")
    kspJs project(":door-compiler")
    kspJs project(":door-shallowcopy")
    kspAndroid project(":door-compiler")
    kspAndroid "androidx.room:room-compiler:$version_android_room"
    kspAndroid project(":door-shallowcopy")

    androidTestUtil "androidx.test:orchestrator:$version_androidx_test_orchestrator"
    androidTestImplementation "androidx.test.ext:junit:$version_androidx_test_junit_ext"
    androidTestImplementation "androidx.test:runner:$version_androidx_test_runner"
    androidTestImplementation "androidx.test:rules:$version_androidx_test_rules"
}
